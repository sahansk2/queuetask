[{"/home/sahan/Documents/queuetask/src/index.js":"1","/home/sahan/Documents/queuetask/src/App.js":"2"},{"size":432,"mtime":1610440573299,"results":"3","hashOfConfig":"4"},{"size":4261,"mtime":1610506609143,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1iimyh3",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"/home/sahan/Documents/queuetask/src/index.js",[],"/home/sahan/Documents/queuetask/src/App.js",["11","12"],"import React, { useState, useEffect } from 'react'\n\nconst TaskDisplay = ({ showAll, tasks }) => {\n    const firstTask = tasks.length > 0 ? tasks[0] : \"\"\n    const otherTasks = showAll && tasks.length > 0 ? tasks.slice(1) : []\n    if (firstTask) {\n        return (\n            <ul className=\"list-group\">\n                <li key={firstTask.creationDate} className=\"list-group-item active\">{firstTask.value}</li>\n                {otherTasks.map(t => <li key={t.creationDate} className=\"list-group-item\">{t.value}</li>)}\n            </ul>\n        )\n    } else {\n        return <p className=\"alert alert-success\">All Done!</p>\n    }\n}\n\nconst Heading = () => {\n    return (\n        <div className=\"jumbotron text-center\">\n            <h1>QueueTask</h1>\n            <em>Deal with the task at hand, and <strong>only</strong> the task at hand.</em>\n        </div>\n    )\n}\n\nconst Content = () => {\n    const [newEntry, setNewEntry] = useState(\"\")\n    const [tasks, setTasks] = useState([])\n    const [showAll, setShowAll] = useState(false)\n\n    const updateTitle = useEffect(() => {\n        document.title = tasks.length > 0 ? `(${tasks.length}) QueueTask` : \"QueueTask\"\n    }, [tasks])\n\n    const storeToLocal = useEffect(() => {\n        const savedTasksLS = JSON.parse(localStorage.getItem('savedTasks'))\n        if (savedTasksLS) {\n            setTasks(savedTasksLS)\n        }\n    }, [])\n\n    const setAndStoreTasks = (updatedTasks) => {\n        setTasks(updatedTasks)\n        localStorage.setItem('savedTasks', JSON.stringify(updatedTasks))\n    }\n\n    const removeTop = () => {\n        if (tasks.length > 0) {\n            setAndStoreTasks(tasks.slice(1))\n        }\n    }\n\n    const shiftNext = () => {\n        if (tasks.length > 1) {\n            setAndStoreTasks([...tasks.slice(1), tasks[0]])\n        }\n    }\n\n    const toggleShowAll = (event) => {\n        setShowAll(event.target.checked)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (newEntry.length > 0) {\n            const newTask = {\n                value: newEntry,\n                creationDate: new Date().toISOString()\n            }\n            const updatedTasks = [...tasks, newTask]\n            setAndStoreTasks(updatedTasks)\n            setNewEntry(\"\")\n        }\n    }\n\n    const handleInputChange = (event) => {\n        setNewEntry(event.target.value)\n    }\n\n    return (\n        <div className=\"container text-center\">\n            <div className=\"custom-control custom-checkbox\">\n                <input type=\"checkbox\" className=\"custom-control-input\" id=\"showAllCheckbox\" onClick={toggleShowAll}/>\n                <label className=\"custom-control-label\" for=\"showAllCheckbox\">Show All Tasks</label>\n            </div>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" className=\"form-control\" value={newEntry} onChange={handleInputChange}/>\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-primary\">Add</button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n            <div className=\"btn-group m-1\" role=\"group\" aria-label=\"taskActionGroup\">\n                <button onClick={removeTop} className=\"btn btn-success\">Remove Top</button>\n                <button onClick={shiftNext} className=\"btn btn-secondary\">Reveal Next</button>\n            </div>\n\n            {/* <MetaDisplay count={tasks.length}/> */}\n            <div className=\"m-3\">\n                <TaskDisplay showAll={showAll} tasks={tasks}/>\n            </div>\n        </div>\n    )\n}\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer p-1\">\n            <div className=\"container p-1\">\n                <div className=\"row\">\n                    <div className=\"col text-right\">\n                        <a href=\"https://www.sahansk.com\">Â© 2021 Sahan Kumarasinghe</a>\n                    </div>\n                </div>\n            </div>\n        </footer>\n    )\n}\nconst App = () => {\n    return (\n        <div>\n            <Heading/>\n            <Content/>\n            <Footer/>\n        </div>\n    )\n}\n\nexport default App;",{"ruleId":"13","severity":1,"message":"14","line":32,"column":11,"nodeType":"15","messageId":"16","endLine":32,"endColumn":22},{"ruleId":"13","severity":1,"message":"17","line":36,"column":11,"nodeType":"15","messageId":"16","endLine":36,"endColumn":23},"no-unused-vars","'updateTitle' is assigned a value but never used.","Identifier","unusedVar","'storeToLocal' is assigned a value but never used."]