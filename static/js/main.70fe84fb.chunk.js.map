{"version":3,"sources":["App.js","index.js"],"names":["TaskDisplay","showAll","tasks","firstTask","length","otherTasks","slice","className","value","creationDate","map","t","Heading","Content","useState","newEntry","setNewEntry","setTasks","setShowAll","setAndStoreTasks","useEffect","document","title","savedTasksLS","JSON","parse","localStorage","getItem","updatedTasks","setItem","stringify","type","id","onClick","event","target","checked","for","onSubmit","preventDefault","newTask","Date","toISOString","onChange","role","aria-label","Footer","href","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"4LAEMA,EAAc,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,MACtBC,EAAYD,EAAME,OAAS,EAAIF,EAAM,GAAK,GAC1CG,EAAaJ,GAAWC,EAAME,OAAS,EAAIF,EAAMI,MAAM,GAAK,GAClE,OAAIH,EAEI,qBAAII,UAAU,aAAd,UACI,oBAAiCA,UAAU,yBAA3C,SAAqEJ,EAAUK,OAAtEL,EAAUM,cAClBJ,EAAWK,KAAI,SAAAC,GAAC,OAAI,oBAAyBJ,UAAU,kBAAnC,SAAsDI,EAAEH,OAA/CG,EAAEF,oBAIjC,mBAAGF,UAAU,sBAAb,wBAITK,EAAU,WACZ,OACI,sBAAKL,UAAU,wBAAf,UACI,2CACA,kEAAoC,0CAApC,4BAKNM,EAAU,WAAO,IAAD,EACcC,mBAAS,IADvB,mBACXC,EADW,KACDC,EADC,OAEQF,mBAAS,IAFjB,mBAEXZ,EAFW,KAEJe,EAFI,OAGYH,oBAAS,GAHrB,mBAGXb,EAHW,KAGFiB,EAHE,KAgBZC,GAXcC,qBAAU,WAC1BC,SAASC,MAAQpB,EAAME,OAAS,EAAf,WAAuBF,EAAME,OAA7B,eAAmD,cACrE,CAACF,IAEiBkB,qBAAU,WAC3B,IAAMG,EAAeC,KAAKC,MAAMC,aAAaC,QAAQ,eACjDJ,GACAN,EAASM,KAEd,IAEsB,SAACK,GACtBX,EAASW,GACTF,aAAaG,QAAQ,aAAcL,KAAKM,UAAUF,MAoCtD,OACI,sBAAKrB,UAAU,wBAAf,UACI,sBAAKA,UAAU,iCAAf,UACI,uBAAOwB,KAAK,WAAWxB,UAAU,uBAAuByB,GAAG,kBAAkBC,QAxBnE,SAACC,GACnBhB,EAAWgB,EAAMC,OAAOC,YAwBhB,uBAAO7B,UAAU,uBAAuB8B,IAAI,kBAA5C,+BAEJ,sBAAMC,SAvBO,SAACJ,GAElB,GADAA,EAAMK,iBACFxB,EAASX,OAAS,EAAG,CACrB,IAAMoC,EAAU,CACZhC,MAAOO,EACPN,cAAc,IAAIgC,MAAOC,eAEvBd,EAAY,sBAAO1B,GAAP,CAAcsC,IAChCrB,EAAiBS,GACjBZ,EAAY,MAcZ,SACI,qBAAKT,UAAU,aAAf,SACI,sBAAKA,UAAU,mBAAf,UACI,uBAAOwB,KAAK,OAAOxB,UAAU,eAAeC,MAAOO,EAAU4B,SAbvD,SAACT,GACvBlB,EAAYkB,EAAMC,OAAO3B,UAaT,qBAAKD,UAAU,qBAAf,SACI,wBAAQA,UAAU,kBAAlB,0BAKhB,sBAAKA,UAAU,gBAAgBqC,KAAK,QAAQC,aAAW,kBAAvD,UACI,wBAAQZ,QAlDF,WACV/B,EAAME,OAAS,GACfe,EAAiBjB,EAAMI,MAAM,KAgDGC,UAAU,kBAAtC,wBACA,wBAAQ0B,QA7CF,WACV/B,EAAME,OAAS,GACfe,EAAiB,GAAD,mBAAKjB,EAAMI,MAAM,IAAjB,CAAqBJ,EAAM,OA2CXK,UAAU,oBAAtC,4BAIJ,qBAAKA,UAAU,MAAf,SACI,cAAC,EAAD,CAAaN,QAASA,EAASC,MAAOA,UAMhD4C,EAAS,WACX,OACI,wBAAQvC,UAAU,aAAlB,SACI,qBAAKA,UAAU,gBAAf,SACI,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,iBAAf,SACI,mBAAGwC,KAAK,0BAAR,mDAiBTC,EAVH,WACR,OACI,gCACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,MC1HZC,IAASC,OACP,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJ9B,SAAS+B,eAAe,W","file":"static/js/main.70fe84fb.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nconst TaskDisplay = ({ showAll, tasks }) => {\n    const firstTask = tasks.length > 0 ? tasks[0] : \"\"\n    const otherTasks = showAll && tasks.length > 0 ? tasks.slice(1) : []\n    if (firstTask) {\n        return (\n            <ul className=\"list-group\">\n                <li key={firstTask.creationDate} className=\"list-group-item active\">{firstTask.value}</li>\n                {otherTasks.map(t => <li key={t.creationDate} className=\"list-group-item\">{t.value}</li>)}\n            </ul>\n        )\n    } else {\n        return <p className=\"alert alert-success\">All Done!</p>\n    }\n}\n\nconst Heading = () => {\n    return (\n        <div className=\"jumbotron text-center\">\n            <h1>QueueTask</h1>\n            <em>Deal with the task at hand, and <strong>only</strong> the task at hand.</em>\n        </div>\n    )\n}\n\nconst Content = () => {\n    const [newEntry, setNewEntry] = useState(\"\")\n    const [tasks, setTasks] = useState([])\n    const [showAll, setShowAll] = useState(false)\n\n    const updateTitle = useEffect(() => {\n        document.title = tasks.length > 0 ? `(${tasks.length}) QueueTask` : \"QueueTask\"\n    }, [tasks])\n\n    const storeToLocal = useEffect(() => {\n        const savedTasksLS = JSON.parse(localStorage.getItem('savedTasks'))\n        if (savedTasksLS) {\n            setTasks(savedTasksLS)\n        }\n    }, [])\n\n    const setAndStoreTasks = (updatedTasks) => {\n        setTasks(updatedTasks)\n        localStorage.setItem('savedTasks', JSON.stringify(updatedTasks))\n    }\n\n    const removeTop = () => {\n        if (tasks.length > 0) {\n            setAndStoreTasks(tasks.slice(1))\n        }\n    }\n\n    const shiftNext = () => {\n        if (tasks.length > 1) {\n            setAndStoreTasks([...tasks.slice(1), tasks[0]])\n        }\n    }\n\n    const toggleShowAll = (event) => {\n        setShowAll(event.target.checked)\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        if (newEntry.length > 0) {\n            const newTask = {\n                value: newEntry,\n                creationDate: new Date().toISOString()\n            }\n            const updatedTasks = [...tasks, newTask]\n            setAndStoreTasks(updatedTasks)\n            setNewEntry(\"\")\n        }\n    }\n\n    const handleInputChange = (event) => {\n        setNewEntry(event.target.value)\n    }\n\n    return (\n        <div className=\"container text-center\">\n            <div className=\"custom-control custom-checkbox\">\n                <input type=\"checkbox\" className=\"custom-control-input\" id=\"showAllCheckbox\" onClick={toggleShowAll}/>\n                <label className=\"custom-control-label\" for=\"showAllCheckbox\">Show All Tasks</label>\n            </div>\n            <form onSubmit={handleSubmit}>\n                <div className=\"form-group\">\n                    <div className=\"input-group mb-3\">\n                        <input type=\"text\" className=\"form-control\" value={newEntry} onChange={handleInputChange}/>\n                        <div className=\"input-group-append\">\n                            <button className=\"btn btn-primary\">Add</button>\n                        </div>\n                    </div>\n                </div>\n            </form>\n            <div className=\"btn-group m-1\" role=\"group\" aria-label=\"taskActionGroup\">\n                <button onClick={removeTop} className=\"btn btn-success\">Remove Top</button>\n                <button onClick={shiftNext} className=\"btn btn-secondary\">Reveal Next</button>\n            </div>\n\n            {/* <MetaDisplay count={tasks.length}/> */}\n            <div className=\"m-3\">\n                <TaskDisplay showAll={showAll} tasks={tasks}/>\n            </div>\n        </div>\n    )\n}\n\nconst Footer = () => {\n    return (\n        <footer className=\"footer p-1\">\n            <div className=\"container p-1\">\n                <div className=\"row\">\n                    <div className=\"col text-right\">\n                        <a href=\"https://www.sahansk.com\">Â© 2021 Sahan Kumarasinghe</a>\n                    </div>\n                </div>\n            </div>\n        </footer>\n    )\n}\nconst App = () => {\n    return (\n        <div>\n            <Heading/>\n            <Content/>\n            <Footer/>\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n  <React.StrictMode>\n      <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}